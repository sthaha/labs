/* src/routes/P2DTest.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	to_number,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import Canvas from "../p5/Canvas.js";

function create_fragment(ctx) {
	let canvas;
	let t0;
	let label0;
	let t1;
	let input0;
	let t2;
	let label1;
	let t3;
	let input1;
	let t4;
	let label2;
	let t5;
	let input2;
	let t6;
	let t7;
	let current;
	let mounted;
	let dispose;
	canvas = new Canvas({ props: { sketch: /*sketch*/ ctx[5] } });

	return {
		c() {
			create_component(canvas.$$.fragment);
			t0 = space();
			label0 = element("label");
			t1 = text("x:  ");
			input0 = element("input");
			t2 = space();
			label1 = element("label");
			t3 = text("y: ");
			input1 = element("input");
			t4 = space();
			label2 = element("label");
			t5 = text("speed:\n  ");
			input2 = element("input");
			t6 = space();
			t7 = text(/*dt*/ ctx[4]);
			attr(input0, "type", "range");
			attr(input0, "min", "0");
			attr(input0, "max", /*width*/ ctx[2]);
			attr(input1, "type", "range");
			attr(input1, "min", "0");
			attr(input1, "max", /*height*/ ctx[3]);
			attr(input2, "type", "range");
			attr(input2, "min", "0.0");
			attr(input2, "max", "1.0");
			attr(input2, "step", "0.05");
		},
		m(target, anchor) {
			mount_component(canvas, target, anchor);
			insert(target, t0, anchor);
			insert(target, label0, anchor);
			append(label0, t1);
			append(label0, input0);
			set_input_value(input0, /*x*/ ctx[0]);
			insert(target, t2, anchor);
			insert(target, label1, anchor);
			append(label1, t3);
			append(label1, input1);
			set_input_value(input1, /*y*/ ctx[1]);
			insert(target, t4, anchor);
			insert(target, label2, anchor);
			append(label2, t5);
			append(label2, input2);
			set_input_value(input2, /*dt*/ ctx[4]);
			append(label2, t6);
			append(label2, t7);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_input_handler*/ ctx[6]),
					listen(input0, "input", /*input0_change_input_handler*/ ctx[6]),
					listen(input1, "change", /*input1_change_input_handler*/ ctx[7]),
					listen(input1, "input", /*input1_change_input_handler*/ ctx[7]),
					listen(input2, "change", /*input2_change_input_handler*/ ctx[8]),
					listen(input2, "input", /*input2_change_input_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*width*/ 4) {
				attr(input0, "max", /*width*/ ctx[2]);
			}

			if (dirty & /*x*/ 1) {
				set_input_value(input0, /*x*/ ctx[0]);
			}

			if (!current || dirty & /*height*/ 8) {
				attr(input1, "max", /*height*/ ctx[3]);
			}

			if (dirty & /*y*/ 2) {
				set_input_value(input1, /*y*/ ctx[1]);
			}

			if (dirty & /*dt*/ 16) {
				set_input_value(input2, /*dt*/ ctx[4]);
			}

			if (!current || dirty & /*dt*/ 16) set_data(t7, /*dt*/ ctx[4]);
		},
		i(local) {
			if (current) return;
			transition_in(canvas.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(canvas.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(canvas, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(label0);
			if (detaching) detach(t2);
			if (detaching) detach(label1);
			if (detaching) detach(t4);
			if (detaching) detach(label2);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let x = 100;
	let y = 100;
	let width = 100;
	let height = 100;
	let dt = 0.1;

	const sketch = p => {
		let w = p.random(50, 100);
		let h = p.random(50, 100);

		p.setup = () => {
			p.createCanvas(p.windowWidth, 410);
			$$invalidate(2, width = p.width - w);
			$$invalidate(3, height = p.height - h);
			$$invalidate(0, x = width / 2 - w / 2);
			$$invalidate(1, y = height / 2 - h / 2);
		};

		p.draw = () => {
			p.background(0);
			p.fill(255);
			p.rect(x, y, w, h);
		};
	};

	function input0_change_input_handler() {
		x = to_number(this.value);
		$$invalidate(0, x);
	}

	function input1_change_input_handler() {
		y = to_number(this.value);
		$$invalidate(1, y);
	}

	function input2_change_input_handler() {
		dt = to_number(this.value);
		$$invalidate(4, dt);
	}

	return [
		x,
		y,
		width,
		height,
		dt,
		sketch,
		input0_change_input_handler,
		input1_change_input_handler,
		input2_change_input_handler
	];
}

class P2DTest extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default P2DTest;